/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.exportSymbol('proto.Feature', null, global);
goog.exportSymbol('proto.Metric', null, global);
goog.exportSymbol('proto.OutputType', null, global);
goog.exportSymbol('proto.Pipeline', null, global);
goog.exportSymbol('proto.PipelineCreateRequest', null, global);
goog.exportSymbol('proto.PipelineCreateResult', null, global);
goog.exportSymbol('proto.PipelineCreateResultsRequest', null, global);
goog.exportSymbol('proto.PipelineDeleteRequest', null, global);
goog.exportSymbol('proto.PipelineExecuteRequest', null, global);
goog.exportSymbol('proto.PipelineExecuteResult', null, global);
goog.exportSymbol('proto.PipelineExecuteResultsRequest', null, global);
goog.exportSymbol('proto.PipelineExportRequest', null, global);
goog.exportSymbol('proto.PipelineListRequest', null, global);
goog.exportSymbol('proto.PipelineListResult', null, global);
goog.exportSymbol('proto.Progress', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.Score', null, global);
goog.exportSymbol('proto.SessionContext', null, global);
goog.exportSymbol('proto.SessionRequest', null, global);
goog.exportSymbol('proto.SessionResponse', null, global);
goog.exportSymbol('proto.Status', null, global);
goog.exportSymbol('proto.StatusCode', null, global);
goog.exportSymbol('proto.TaskSubtype', null, global);
goog.exportSymbol('proto.TaskType', null, global);
goog.exportSymbol('proto.UpdateProblemSchemaRequest', null, global);
goog.exportSymbol('proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField', null, global);
goog.exportSymbol('proto.protocolVersion', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SessionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SessionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SessionContext.displayName = 'proto.SessionContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SessionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.SessionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SessionContext} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SessionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SessionContext}
 */
proto.SessionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SessionContext;
  return proto.SessionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SessionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SessionContext}
 */
proto.SessionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SessionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SessionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SessionContext} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SessionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.SessionContext.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SessionContext.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Status.displayName = 'proto.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Status} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    details: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Status}
 */
proto.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Status;
  return proto.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Status}
 */
proto.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Status} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional StatusCode code = 1;
 * @return {!proto.StatusCode}
 */
proto.Status.prototype.getCode = function() {
  return /** @type {!proto.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.StatusCode} value */
proto.Status.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string details = 2;
 * @return {string}
 */
proto.Status.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Status.prototype.setDetails = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Response.displayName = 'proto.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Status;
      reader.readMessage(value,proto.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.Status}
 */
proto.Response.prototype.getStatus = function() {
  return /** @type{?proto.Status} */ (
    jspb.Message.getWrapperField(this, proto.Status, 1));
};


/** @param {?proto.Status|undefined} value */
proto.Response.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Response.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Response.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SessionRequest.displayName = 'proto.SessionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SessionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAgent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SessionRequest}
 */
proto.SessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SessionRequest;
  return proto.SessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SessionRequest}
 */
proto.SessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string user_agent = 1;
 * @return {string}
 */
proto.SessionRequest.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SessionRequest.prototype.setUserAgent = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.SessionRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SessionRequest.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SessionResponse.displayName = 'proto.SessionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SessionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseInfo: (f = msg.getResponseInfo()) && proto.Response.toObject(includeInstance, f),
    userAgent: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SessionResponse}
 */
proto.SessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SessionResponse;
  return proto.SessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SessionResponse}
 */
proto.SessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResponseInfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserAgent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getUserAgent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response response_info = 1;
 * @return {?proto.Response}
 */
proto.SessionResponse.prototype.getResponseInfo = function() {
  return /** @type{?proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 1));
};


/** @param {?proto.Response|undefined} value */
proto.SessionResponse.prototype.setResponseInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SessionResponse.prototype.clearResponseInfo = function() {
  this.setResponseInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SessionResponse.prototype.hasResponseInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_agent = 2;
 * @return {string}
 */
proto.SessionResponse.prototype.getUserAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SessionResponse.prototype.setUserAgent = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.SessionResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.SessionResponse.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional SessionContext context = 4;
 * @return {?proto.SessionContext}
 */
proto.SessionResponse.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 4));
};


/** @param {?proto.SessionContext|undefined} value */
proto.SessionResponse.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SessionResponse.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SessionResponse.prototype.hasContext = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Feature.displayName = 'proto.Feature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Feature} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataUri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Feature}
 */
proto.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Feature;
  return proto.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Feature}
 */
proto.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Feature} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string feature_id = 1;
 * @return {string}
 */
proto.Feature.prototype.getFeatureId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Feature.prototype.setFeatureId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string data_uri = 2;
 * @return {string}
 */
proto.Feature.prototype.getDataUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Feature.prototype.setDataUri = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineCreateRequest.repeatedFields_, null);
};
goog.inherits(proto.PipelineCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineCreateRequest.displayName = 'proto.PipelineCreateRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineCreateRequest.repeatedFields_ = [2,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f),
    trainFeaturesList: jspb.Message.toObjectList(msg.getTrainFeaturesList(),
    proto.Feature.toObject, includeInstance),
    task: jspb.Message.getFieldWithDefault(msg, 3, 0),
    taskSubtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    taskDescription: jspb.Message.getFieldWithDefault(msg, 5, ""),
    output: jspb.Message.getFieldWithDefault(msg, 6, 0),
    metricsList: jspb.Message.getField(msg, 7),
    targetFeaturesList: jspb.Message.toObjectList(msg.getTargetFeaturesList(),
    proto.Feature.toObject, includeInstance),
    maxPipelines: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineCreateRequest}
 */
proto.PipelineCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineCreateRequest;
  return proto.PipelineCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineCreateRequest}
 */
proto.PipelineCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = new proto.Feature;
      reader.readMessage(value,proto.Feature.deserializeBinaryFromReader);
      msg.addTrainFeatures(value);
      break;
    case 3:
      var value = /** @type {!proto.TaskType} */ (reader.readEnum());
      msg.setTask(value);
      break;
    case 4:
      var value = /** @type {!proto.TaskSubtype} */ (reader.readEnum());
      msg.setTaskSubtype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskDescription(value);
      break;
    case 6:
      var value = /** @type {!proto.OutputType} */ (reader.readEnum());
      msg.setOutput(value);
      break;
    case 7:
      var value = /** @type {!Array.<!proto.Metric>} */ (reader.readPackedEnum());
      msg.setMetricsList(value);
      break;
    case 8:
      var value = new proto.Feature;
      reader.readMessage(value,proto.Feature.deserializeBinaryFromReader);
      msg.addTargetFeatures(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxPipelines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
  f = message.getTrainFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Feature.serializeBinaryToWriter
    );
  }
  f = message.getTask();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTaskSubtype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTaskDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOutput();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      7,
      f
    );
  }
  f = message.getTargetFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.Feature.serializeBinaryToWriter
    );
  }
  f = message.getMaxPipelines();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineCreateRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineCreateRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineCreateRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineCreateRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Feature train_features = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Feature>}
 */
proto.PipelineCreateRequest.prototype.getTrainFeaturesList = function() {
  return /** @type{!Array.<!proto.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Feature, 2));
};


/** @param {!Array.<!proto.Feature>} value */
proto.PipelineCreateRequest.prototype.setTrainFeaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Feature}
 */
proto.PipelineCreateRequest.prototype.addTrainFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Feature, opt_index);
};


proto.PipelineCreateRequest.prototype.clearTrainFeaturesList = function() {
  this.setTrainFeaturesList([]);
};


/**
 * optional TaskType task = 3;
 * @return {!proto.TaskType}
 */
proto.PipelineCreateRequest.prototype.getTask = function() {
  return /** @type {!proto.TaskType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TaskType} value */
proto.PipelineCreateRequest.prototype.setTask = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional TaskSubtype task_subtype = 4;
 * @return {!proto.TaskSubtype}
 */
proto.PipelineCreateRequest.prototype.getTaskSubtype = function() {
  return /** @type {!proto.TaskSubtype} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.TaskSubtype} value */
proto.PipelineCreateRequest.prototype.setTaskSubtype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string task_description = 5;
 * @return {string}
 */
proto.PipelineCreateRequest.prototype.getTaskDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.PipelineCreateRequest.prototype.setTaskDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional OutputType output = 6;
 * @return {!proto.OutputType}
 */
proto.PipelineCreateRequest.prototype.getOutput = function() {
  return /** @type {!proto.OutputType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.OutputType} value */
proto.PipelineCreateRequest.prototype.setOutput = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated Metric metrics = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Metric>}
 */
proto.PipelineCreateRequest.prototype.getMetricsList = function() {
  return /** @type {!Array.<!proto.Metric>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<!proto.Metric>} value */
proto.PipelineCreateRequest.prototype.setMetricsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!proto.Metric} value
 * @param {number=} opt_index
 */
proto.PipelineCreateRequest.prototype.addMetrics = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.PipelineCreateRequest.prototype.clearMetricsList = function() {
  this.setMetricsList([]);
};


/**
 * repeated Feature target_features = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Feature>}
 */
proto.PipelineCreateRequest.prototype.getTargetFeaturesList = function() {
  return /** @type{!Array.<!proto.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Feature, 8));
};


/** @param {!Array.<!proto.Feature>} value */
proto.PipelineCreateRequest.prototype.setTargetFeaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Feature}
 */
proto.PipelineCreateRequest.prototype.addTargetFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Feature, opt_index);
};


proto.PipelineCreateRequest.prototype.clearTargetFeaturesList = function() {
  this.setTargetFeaturesList([]);
};


/**
 * optional int32 max_pipelines = 9;
 * @return {number}
 */
proto.PipelineCreateRequest.prototype.getMaxPipelines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.PipelineCreateRequest.prototype.setMaxPipelines = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Score = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Score, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Score.displayName = 'proto.Score';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Score.prototype.toObject = function(opt_includeInstance) {
  return proto.Score.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Score} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Score.toObject = function(includeInstance, msg) {
  var f, obj = {
    metric: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Score}
 */
proto.Score.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Score;
  return proto.Score.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Score} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Score}
 */
proto.Score.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Metric} */ (reader.readEnum());
      msg.setMetric(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Score.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Score.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Score} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Score.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetric();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Metric metric = 1;
 * @return {!proto.Metric}
 */
proto.Score.prototype.getMetric = function() {
  return /** @type {!proto.Metric} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Metric} value */
proto.Score.prototype.setMetric = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.Score.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Score.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pipeline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Pipeline.repeatedFields_, null);
};
goog.inherits(proto.Pipeline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Pipeline.displayName = 'proto.Pipeline';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Pipeline.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pipeline.prototype.toObject = function(opt_includeInstance) {
  return proto.Pipeline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pipeline} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Pipeline.toObject = function(includeInstance, msg) {
  var f, obj = {
    predictResultUrisList: jspb.Message.getField(msg, 1),
    output: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scoresList: jspb.Message.toObjectList(msg.getScoresList(),
    proto.Score.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pipeline}
 */
proto.Pipeline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pipeline;
  return proto.Pipeline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pipeline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pipeline}
 */
proto.Pipeline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPredictResultUris(value);
      break;
    case 2:
      var value = /** @type {!proto.OutputType} */ (reader.readEnum());
      msg.setOutput(value);
      break;
    case 3:
      var value = new proto.Score;
      reader.readMessage(value,proto.Score.deserializeBinaryFromReader);
      msg.addScores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pipeline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pipeline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pipeline} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Pipeline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPredictResultUrisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getOutput();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScoresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Score.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string predict_result_uris = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.Pipeline.prototype.getPredictResultUrisList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<string>} value */
proto.Pipeline.prototype.setPredictResultUrisList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Pipeline.prototype.addPredictResultUris = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Pipeline.prototype.clearPredictResultUrisList = function() {
  this.setPredictResultUrisList([]);
};


/**
 * optional OutputType output = 2;
 * @return {!proto.OutputType}
 */
proto.Pipeline.prototype.getOutput = function() {
  return /** @type {!proto.OutputType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.OutputType} value */
proto.Pipeline.prototype.setOutput = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Score scores = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Score>}
 */
proto.Pipeline.prototype.getScoresList = function() {
  return /** @type{!Array.<!proto.Score>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Score, 3));
};


/** @param {!Array.<!proto.Score>} value */
proto.Pipeline.prototype.setScoresList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Score=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Score}
 */
proto.Pipeline.prototype.addScores = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Score, opt_index);
};


proto.Pipeline.prototype.clearScoresList = function() {
  this.setScoresList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineCreateResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PipelineCreateResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineCreateResult.displayName = 'proto.PipelineCreateResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineCreateResult.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineCreateResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineCreateResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineCreateResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseInfo: (f = msg.getResponseInfo()) && proto.Response.toObject(includeInstance, f),
    progressInfo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pipelineId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pipelineInfo: (f = msg.getPipelineInfo()) && proto.Pipeline.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineCreateResult}
 */
proto.PipelineCreateResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineCreateResult;
  return proto.PipelineCreateResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineCreateResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineCreateResult}
 */
proto.PipelineCreateResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResponseInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.Progress} */ (reader.readEnum());
      msg.setProgressInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelineId(value);
      break;
    case 4:
      var value = new proto.Pipeline;
      reader.readMessage(value,proto.Pipeline.deserializeBinaryFromReader);
      msg.setPipelineInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineCreateResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineCreateResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineCreateResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineCreateResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getProgressInfo();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPipelineId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPipelineInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Pipeline.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response response_info = 1;
 * @return {?proto.Response}
 */
proto.PipelineCreateResult.prototype.getResponseInfo = function() {
  return /** @type{?proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 1));
};


/** @param {?proto.Response|undefined} value */
proto.PipelineCreateResult.prototype.setResponseInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineCreateResult.prototype.clearResponseInfo = function() {
  this.setResponseInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineCreateResult.prototype.hasResponseInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Progress progress_info = 2;
 * @return {!proto.Progress}
 */
proto.PipelineCreateResult.prototype.getProgressInfo = function() {
  return /** @type {!proto.Progress} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Progress} value */
proto.PipelineCreateResult.prototype.setProgressInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pipeline_id = 3;
 * @return {string}
 */
proto.PipelineCreateResult.prototype.getPipelineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.PipelineCreateResult.prototype.setPipelineId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Pipeline pipeline_info = 4;
 * @return {?proto.Pipeline}
 */
proto.PipelineCreateResult.prototype.getPipelineInfo = function() {
  return /** @type{?proto.Pipeline} */ (
    jspb.Message.getWrapperField(this, proto.Pipeline, 4));
};


/** @param {?proto.Pipeline|undefined} value */
proto.PipelineCreateResult.prototype.setPipelineInfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.PipelineCreateResult.prototype.clearPipelineInfo = function() {
  this.setPipelineInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineCreateResult.prototype.hasPipelineInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineExecuteRequest.repeatedFields_, null);
};
goog.inherits(proto.PipelineExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineExecuteRequest.displayName = 'proto.PipelineExecuteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineExecuteRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f),
    pipelineId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    predictFeaturesList: jspb.Message.toObjectList(msg.getPredictFeaturesList(),
    proto.Feature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineExecuteRequest}
 */
proto.PipelineExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineExecuteRequest;
  return proto.PipelineExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineExecuteRequest}
 */
proto.PipelineExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelineId(value);
      break;
    case 3:
      var value = new proto.Feature;
      reader.readMessage(value,proto.Feature.deserializeBinaryFromReader);
      msg.addPredictFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineExecuteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
  f = message.getPipelineId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPredictFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Feature.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineExecuteRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineExecuteRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineExecuteRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineExecuteRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pipeline_id = 2;
 * @return {string}
 */
proto.PipelineExecuteRequest.prototype.getPipelineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PipelineExecuteRequest.prototype.setPipelineId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Feature predict_features = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Feature>}
 */
proto.PipelineExecuteRequest.prototype.getPredictFeaturesList = function() {
  return /** @type{!Array.<!proto.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Feature, 3));
};


/** @param {!Array.<!proto.Feature>} value */
proto.PipelineExecuteRequest.prototype.setPredictFeaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Feature}
 */
proto.PipelineExecuteRequest.prototype.addPredictFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Feature, opt_index);
};


proto.PipelineExecuteRequest.prototype.clearPredictFeaturesList = function() {
  this.setPredictFeaturesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineExecuteResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineExecuteResult.repeatedFields_, null);
};
goog.inherits(proto.PipelineExecuteResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineExecuteResult.displayName = 'proto.PipelineExecuteResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineExecuteResult.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineExecuteResult.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineExecuteResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineExecuteResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineExecuteResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseInfo: (f = msg.getResponseInfo()) && proto.Response.toObject(includeInstance, f),
    progressInfo: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pipelineId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resultUrisList: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineExecuteResult}
 */
proto.PipelineExecuteResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineExecuteResult;
  return proto.PipelineExecuteResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineExecuteResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineExecuteResult}
 */
proto.PipelineExecuteResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResponseInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.Progress} */ (reader.readEnum());
      msg.setProgressInfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelineId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addResultUris(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineExecuteResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineExecuteResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineExecuteResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineExecuteResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getProgressInfo();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPipelineId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResultUrisList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional Response response_info = 1;
 * @return {?proto.Response}
 */
proto.PipelineExecuteResult.prototype.getResponseInfo = function() {
  return /** @type{?proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 1));
};


/** @param {?proto.Response|undefined} value */
proto.PipelineExecuteResult.prototype.setResponseInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineExecuteResult.prototype.clearResponseInfo = function() {
  this.setResponseInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineExecuteResult.prototype.hasResponseInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Progress progress_info = 2;
 * @return {!proto.Progress}
 */
proto.PipelineExecuteResult.prototype.getProgressInfo = function() {
  return /** @type {!proto.Progress} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Progress} value */
proto.PipelineExecuteResult.prototype.setProgressInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pipeline_id = 3;
 * @return {string}
 */
proto.PipelineExecuteResult.prototype.getPipelineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.PipelineExecuteResult.prototype.setPipelineId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string result_uris = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.PipelineExecuteResult.prototype.getResultUrisList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.PipelineExecuteResult.prototype.setResultUrisList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.PipelineExecuteResult.prototype.addResultUris = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.PipelineExecuteResult.prototype.clearResultUrisList = function() {
  this.setResultUrisList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PipelineListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineListRequest.displayName = 'proto.PipelineListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineListRequest}
 */
proto.PipelineListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineListRequest;
  return proto.PipelineListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineListRequest}
 */
proto.PipelineListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineListRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineListRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineListRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineListRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineDeleteRequest.repeatedFields_, null);
};
goog.inherits(proto.PipelineDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineDeleteRequest.displayName = 'proto.PipelineDeleteRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineDeleteRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f),
    deletePipelineIdsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineDeleteRequest}
 */
proto.PipelineDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineDeleteRequest;
  return proto.PipelineDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineDeleteRequest}
 */
proto.PipelineDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDeletePipelineIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
  f = message.getDeletePipelineIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineDeleteRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineDeleteRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineDeleteRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineDeleteRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string delete_pipeline_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.PipelineDeleteRequest.prototype.getDeletePipelineIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.PipelineDeleteRequest.prototype.setDeletePipelineIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.PipelineDeleteRequest.prototype.addDeletePipelineIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.PipelineDeleteRequest.prototype.clearDeletePipelineIdsList = function() {
  this.setDeletePipelineIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineListResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineListResult.repeatedFields_, null);
};
goog.inherits(proto.PipelineListResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineListResult.displayName = 'proto.PipelineListResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineListResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineListResult.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineListResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineListResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineListResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseInfo: (f = msg.getResponseInfo()) && proto.Response.toObject(includeInstance, f),
    pipelineIdsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineListResult}
 */
proto.PipelineListResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineListResult;
  return proto.PipelineListResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineListResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineListResult}
 */
proto.PipelineListResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResponseInfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPipelineIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineListResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineListResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineListResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineListResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getPipelineIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Response response_info = 1;
 * @return {?proto.Response}
 */
proto.PipelineListResult.prototype.getResponseInfo = function() {
  return /** @type{?proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 1));
};


/** @param {?proto.Response|undefined} value */
proto.PipelineListResult.prototype.setResponseInfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineListResult.prototype.clearResponseInfo = function() {
  this.setResponseInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineListResult.prototype.hasResponseInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string pipeline_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.PipelineListResult.prototype.getPipelineIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.PipelineListResult.prototype.setPipelineIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.PipelineListResult.prototype.addPipelineIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.PipelineListResult.prototype.clearPipelineIdsList = function() {
  this.setPipelineIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineCreateResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineCreateResultsRequest.repeatedFields_, null);
};
goog.inherits(proto.PipelineCreateResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineCreateResultsRequest.displayName = 'proto.PipelineCreateResultsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineCreateResultsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineCreateResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineCreateResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineCreateResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineCreateResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f),
    pipelineIdsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineCreateResultsRequest}
 */
proto.PipelineCreateResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineCreateResultsRequest;
  return proto.PipelineCreateResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineCreateResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineCreateResultsRequest}
 */
proto.PipelineCreateResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPipelineIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineCreateResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineCreateResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineCreateResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineCreateResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
  f = message.getPipelineIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineCreateResultsRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineCreateResultsRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineCreateResultsRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineCreateResultsRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string pipeline_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.PipelineCreateResultsRequest.prototype.getPipelineIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.PipelineCreateResultsRequest.prototype.setPipelineIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.PipelineCreateResultsRequest.prototype.addPipelineIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.PipelineCreateResultsRequest.prototype.clearPipelineIdsList = function() {
  this.setPipelineIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineExecuteResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PipelineExecuteResultsRequest.repeatedFields_, null);
};
goog.inherits(proto.PipelineExecuteResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineExecuteResultsRequest.displayName = 'proto.PipelineExecuteResultsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PipelineExecuteResultsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineExecuteResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineExecuteResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineExecuteResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineExecuteResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f),
    pipelineIdsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineExecuteResultsRequest}
 */
proto.PipelineExecuteResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineExecuteResultsRequest;
  return proto.PipelineExecuteResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineExecuteResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineExecuteResultsRequest}
 */
proto.PipelineExecuteResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPipelineIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineExecuteResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineExecuteResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineExecuteResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineExecuteResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
  f = message.getPipelineIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineExecuteResultsRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineExecuteResultsRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineExecuteResultsRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineExecuteResultsRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string pipeline_ids = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.PipelineExecuteResultsRequest.prototype.getPipelineIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.PipelineExecuteResultsRequest.prototype.setPipelineIdsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.PipelineExecuteResultsRequest.prototype.addPipelineIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.PipelineExecuteResultsRequest.prototype.clearPipelineIdsList = function() {
  this.setPipelineIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PipelineExportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PipelineExportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PipelineExportRequest.displayName = 'proto.PipelineExportRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PipelineExportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PipelineExportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PipelineExportRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PipelineExportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    context: (f = msg.getContext()) && proto.SessionContext.toObject(includeInstance, f),
    pipelineId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pipelineExecUri: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PipelineExportRequest}
 */
proto.PipelineExportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PipelineExportRequest;
  return proto.PipelineExportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PipelineExportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PipelineExportRequest}
 */
proto.PipelineExportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SessionContext;
      reader.readMessage(value,proto.SessionContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelineId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPipelineExecUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PipelineExportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PipelineExportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PipelineExportRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PipelineExportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SessionContext.serializeBinaryToWriter
    );
  }
  f = message.getPipelineId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPipelineExecUri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SessionContext context = 1;
 * @return {?proto.SessionContext}
 */
proto.PipelineExportRequest.prototype.getContext = function() {
  return /** @type{?proto.SessionContext} */ (
    jspb.Message.getWrapperField(this, proto.SessionContext, 1));
};


/** @param {?proto.SessionContext|undefined} value */
proto.PipelineExportRequest.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.PipelineExportRequest.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PipelineExportRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pipeline_id = 2;
 * @return {string}
 */
proto.PipelineExportRequest.prototype.getPipelineId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PipelineExportRequest.prototype.setPipelineId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string pipeline_exec_uri = 3;
 * @return {string}
 */
proto.PipelineExportRequest.prototype.getPipelineExecUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.PipelineExportRequest.prototype.setPipelineExecUri = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateProblemSchemaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UpdateProblemSchemaRequest.repeatedFields_, null);
};
goog.inherits(proto.UpdateProblemSchemaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateProblemSchemaRequest.displayName = 'proto.UpdateProblemSchemaRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UpdateProblemSchemaRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateProblemSchemaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateProblemSchemaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateProblemSchemaRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateProblemSchemaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateProblemSchemaRequest}
 */
proto.UpdateProblemSchemaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateProblemSchemaRequest;
  return proto.UpdateProblemSchemaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateProblemSchemaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateProblemSchemaRequest}
 */
proto.UpdateProblemSchemaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField;
      reader.readMessage(value,proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateProblemSchemaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateProblemSchemaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateProblemSchemaRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateProblemSchemaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_);
};
goog.inherits(proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.displayName = 'proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.UpdateCase = {
  UPDATE_NOT_SET: 0,
  TASK_TYPE: 1,
  TASK_SUBTYPE: 2,
  TASK_DESCRIPTION: 3,
  OUTPUT_TYPE: 4,
  METRIC: 5
};

/**
 * @return {proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.UpdateCase}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.getUpdateCase = function() {
  return /** @type {proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.UpdateCase} */(jspb.Message.computeOneofCase(this, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.toObject = function(opt_includeInstance) {
  return proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    taskSubtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    taskDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outputType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metric: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField;
  return proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TaskType} */ (reader.readEnum());
      msg.setTaskType(value);
      break;
    case 2:
      var value = /** @type {!proto.TaskSubtype} */ (reader.readEnum());
      msg.setTaskSubtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.OutputType} */ (reader.readEnum());
      msg.setOutputType(value);
      break;
    case 5:
      var value = /** @type {!proto.Metric} */ (reader.readEnum());
      msg.setMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.TaskType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.TaskSubtype} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.OutputType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!proto.Metric} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional TaskType task_type = 1;
 * @return {!proto.TaskType}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.getTaskType = function() {
  return /** @type {!proto.TaskType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TaskType} value */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.setTaskType = function(value) {
  jspb.Message.setOneofField(this, 1, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], value);
};


proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.clearTaskType = function() {
  jspb.Message.setOneofField(this, 1, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.hasTaskType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TaskSubtype task_subtype = 2;
 * @return {!proto.TaskSubtype}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.getTaskSubtype = function() {
  return /** @type {!proto.TaskSubtype} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.TaskSubtype} value */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.setTaskSubtype = function(value) {
  jspb.Message.setOneofField(this, 2, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], value);
};


proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.clearTaskSubtype = function() {
  jspb.Message.setOneofField(this, 2, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.hasTaskSubtype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string task_description = 3;
 * @return {string}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.getTaskDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.setTaskDescription = function(value) {
  jspb.Message.setOneofField(this, 3, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], value);
};


proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.clearTaskDescription = function() {
  jspb.Message.setOneofField(this, 3, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.hasTaskDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OutputType output_type = 4;
 * @return {!proto.OutputType}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.getOutputType = function() {
  return /** @type {!proto.OutputType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.OutputType} value */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.setOutputType = function(value) {
  jspb.Message.setOneofField(this, 4, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], value);
};


proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.clearOutputType = function() {
  jspb.Message.setOneofField(this, 4, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.hasOutputType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Metric metric = 5;
 * @return {!proto.Metric}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.getMetric = function() {
  return /** @type {!proto.Metric} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.Metric} value */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.setMetric = function(value) {
  jspb.Message.setOneofField(this, 5, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], value);
};


proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.clearMetric = function() {
  jspb.Message.setOneofField(this, 5, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField.prototype.hasMetric = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated ReplaceProblemSchemaField updates = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField>}
 */
proto.UpdateProblemSchemaRequest.prototype.getUpdatesList = function() {
  return /** @type{!Array.<!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField, 1));
};


/** @param {!Array.<!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField>} value */
proto.UpdateProblemSchemaRequest.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField}
 */
proto.UpdateProblemSchemaRequest.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UpdateProblemSchemaRequest.ReplaceProblemSchemaField, opt_index);
};


proto.UpdateProblemSchemaRequest.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};


/**
 * @enum {number}
 */
proto.StatusCode = {
  UNKNOWN: 0,
  OK: 1,
  CANCELLED: 2,
  SESSION_UNKNOWN: 3,
  SESSION_ENDED: 4,
  SESSION_EXPIRED: 5,
  INVALID_ARGUMENT: 6,
  RESOURCE_EXHAUSTED: 7,
  UNAVAILABLE: 8,
  FAILED_PRECONDITION: 9,
  OUT_OF_RANGE: 10,
  UNIMPLEMENTED: 11,
  INTERNAL: 12,
  ABORTED: 13
};

/**
 * @enum {number}
 */
proto.Progress = {
  SUBMITTED: 0,
  RUNNING: 1,
  UPDATED: 2,
  COMPLETED: 3
};

/**
 * @enum {number}
 */
proto.TaskType = {
  TASK_TYPE_UNDEFINED: 0,
  CLASSIFICATION: 1,
  REGRESSION: 2,
  SIMILARITY_MATCHING: 3,
  LINK_PREDICTION: 4,
  VERTEX_NOMINATION: 5,
  COMMUNITY_DETECTION: 6,
  GRAPH_MATCHING: 7,
  TIMESERIES_FORECASTING: 8,
  COLLABORATIVE_FILTERING: 9
};

/**
 * @enum {number}
 */
proto.TaskSubtype = {
  TASK_SUBTYPE_UNDEFINED: 0,
  NONE: 1,
  BINARY: 2,
  MULTICLASS: 3,
  MULTILABEL: 4,
  UNIVARIATE: 5,
  MULTIVARIATE: 6,
  OVERLAPPING: 7,
  NONOVERLAPPING: 8
};

/**
 * @enum {number}
 */
proto.OutputType = {
  OUTPUT_TYPE_UNDEFINED: 0,
  CLASS_LABEL: 1,
  PROBABILITY: 2,
  REAL: 3,
  NODE_ID: 4,
  VECTOR_CLASS_LABEL: 5,
  VECTOR_STOCHASTIC: 6,
  VECTOR_REAL: 7,
  FILE: 8
};

/**
 * @enum {number}
 */
proto.Metric = {
  METRIC_UNDEFINED: 0,
  ACCURACY: 1,
  F1: 2,
  F1_MICRO: 3,
  F1_MACRO: 4,
  ROC_AUC: 5,
  ROC_AUC_MICRO: 6,
  ROC_AUC_MACRO: 7,
  ROOT_MEAN_SQUARED_ERROR: 8,
  ROOT_MEAN_SQUARED_ERROR_AVG: 9,
  MEAN_ABSOLUTE_ERROR: 10,
  R_SQUARED: 11,
  NORMALIZED_MUTUAL_INFORMATION: 12,
  JACCARD_SIMILARITY_SCORE: 13,
  EXECUTION_TIME: 14
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `protocolVersion`.
 * @type {!jspb.ExtensionFieldInfo.<string>}
 */
proto.protocolVersion = new jspb.ExtensionFieldInfo(
    54100,
    {protocolVersion: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.FileOptions.extensionsBinary[54100] = new jspb.ExtensionFieldBinaryInfo(
    proto.protocolVersion,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.FileOptions.extensions[54100] = proto.protocolVersion;

goog.object.extend(exports, proto);
